def MULx(V,c):
	if V/128 == 1:
		return (int(V << 1)^c) & 0x0FF
	else:
		return (V << 1)
		

def MULy(V,i,c):
	if i==0:
		return V
	else:
		return MULx(MULy(V,i-1,c),c)
		

v2 = 0x38
c2 = 0x76


def concat(l,r):
	return (l << 8) | r


def addmod(c1,c2):
	return ((c1+c2) & 0xffffffff)










'''
def MULalpha(c):
	a = []
	a.append(MULy(c,23,0xA9))
	a.append(MULy(c,245,0xA9))
	a.append(MULy(c,48,0xA9))
	a.append(MULy(c,239,0xA9))
	return a
'''
def MULalpha(c):
	a = MULy(c,23,0xA9)
	#print(hex(a))
	a = concat(a,MULy(c,245,0xA9))
	
	#print(hex(a))
	a = concat(a,MULy(c,48,0xA9))
	#print(hex(a))
	a = concat(a,MULy(c,239,0xA9))
	#print(hex(a))
	return a
def DIValpha(c):
	a = MULy(c,16,0xA9)
	#print(hex(a))
	a = concat(a,MULy(c,39,0xA9))
	#print(hex(a))
	a = concat(a,MULy(c,6,0xA9))
	#print(hex(a))
	a = concat(a,MULy(c,64,0xA9))
	#print(hex(a))
	return a







def split4(c):
	#print(hex(c))
	c3 = c & 0xFF
	c = c>>8
	#print(hex(c))
	c2 = c & 0xFF
	c =c>>8
	#print(hex(c))
	c1 = c & 0xFF
	c = c>>8
	#print(hex(c))
	c0 = c & 0xFF
	c = c>>8
	return c0,c1,c2,c3
	


def Sr(r):
	sr = [[0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76],
	      [0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0],
	      [0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15],
	      [0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75],
	      [0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84],
	      [0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf],
	      [0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8],
	      [0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2],
	      [0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17,0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73],
	      [0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb],
	      [0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c,0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79],
	      [0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08],
	      [0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a],
	      [0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e,0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e],
	      [0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf],
	      [0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68,0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16]]
	i = r / 16
	j = r % 16
	return sr[i][j]




def Sq(r):
	sq = [[0x25,0x24,0x73,0x67,0xd7,0xae,0x5c,0x30,0xa4,0xee,0x6e,0xcb,0x7d,0xb5,0x82,0xdb],
		  [0xe4,0x8e,0x48,0x49,0x4f,0x5d,0x6a,0x78,0x70,0x88,0xe8,0x5f,0x5e,0x84,0x65,0xe2],
		  [0xd8,0xe9,0xcc,0xed,0x40,0x2f,0x11,0x28,0x57,0xd2,0xac,0xe3,0x4a,0x15,0x1b,0xb9],
		  [0xb2,0x80,0x85,0xa6,0x2e,0x02,0x47,0x29,0x07,0x4b,0x0e,0xc1,0x51,0xaa,0x89,0xd4],
		  [0xca,0x01,0x46,0xb3,0xef,0xdd,0x44,0x7b,0xc2,0x7f,0xbe,0xc3,0x9f,0x20,0x4c,0x64],
		  [0x83,0xa2,0x68,0x42,0x13,0xb4,0x41,0xcd,0xba,0xc6,0xbb,0x6d,0x4d,0x71,0x21,0xf4],
		  [0x8d,0xb0,0xe5,0x93,0xfe,0x8f,0xe6,0xcf,0x43,0x45,0x31,0x22,0x37,0x36,0x96,0xfa],
		  [0xbc,0x0f,0x08,0x52,0x1d,0x55,0x1a,0xc5,0x4e,0x23,0x69,0x7a,0x92,0xff,0x5b,0x5a],
		  [0xeb,0x9a,0x1c,0xa9,0xd1,0x7e,0x0d,0xfc,0x50,0x8a,0xb6,0x62,0xf5,0x0a,0xf8,0xdc],
		  [0x03,0x3c,0x0c,0x39,0xf1,0xb8,0xf3,0x3d,0xf2,0xd5,0x97,0x66,0x81,0x32,0xa0,0x00],
		  [0x06,0xce,0xf6,0xea,0xb7,0x17,0xf7,0x8c,0x79,0xd6,0xa7,0xbf,0x8b,0x3f,0x1f,0x53],
		  [0x63,0x75,0x35,0x2c,0x60,0xfd,0x27,0xd3,0x94,0xa5,0x7c,0xa1,0x05,0x58,0x2d,0xbd],
		  [0xd9,0xc7,0xaf,0x6b,0x54,0x0b,0xe0,0x38,0x04,0xc8,0x9d,0xe7,0x14,0xb1,0x87,0x9c],
		  [0xdf,0x6f,0xf9,0xda,0x2a,0xc4,0x59,0x16,0x74,0x91,0xab,0x26,0x61,0x76,0x34,0x2b],
		  [0xad,0x99,0xfb,0x72,0xec,0x33,0x12,0xde,0x98,0x3b,0xc0,0x9b,0x3e,0x18,0x10,0x3a],
		  [0x56,0xe1,0x77,0xc9,0x1e,0x9e,0x95,0xa3,0x90,0x19,0xa8,0x6c,0x09,0xd0,0xf0,0x86]]
	i = r / 16
	j = r % 16
	return sq[i][j]




def S1(R):
	w0,w1,w2,w3 = split4(R)
	r0 = MULx(Sr(w0),0x1B)^Sr(w1)^Sr(w2)^MULx(Sr(w3),0x1B)^Sr(w3)
	r1 = MULx(Sr(w0),0x1B)^Sr(w0)^MULx(Sr(w1),0x1B)^Sr(w2)^Sr(w3)
	r2 = Sr(w0)^MULx(Sr(w1),0x1B)^Sr(w1)^MULx(Sr(w2),0x1B)^Sr(w3)
	r3 = Sr(w0)^Sr(w1)^MULx(Sr(w2),0x1B)^Sr(w2)^MULx(Sr(w3),0x1b)
	#print(hex(r0),hex(r1),hex(r2))
	return concat(concat(concat(r0,r1),r2),r3)

def S2(R):
	w0,w1,w2,w3 = split4(R)
	r0 = MULx(Sq(w0),0x69)^Sq(w1)^Sq(w2)^MULx(Sq(w3),0x69)^Sq(w3)
	r1 = MULx(Sq(w0),0x69)^Sq(w0)^MULx(Sq(w1),0x69)^Sq(w2)^Sq(w3)
	r2 = Sq(w0)^MULx(Sq(w1),0x69)^Sq(w1)^MULx(Sq(w2),0x69)^Sq(w3)
	r3 = Sq(w0)^Sq(w1)^MULx(Sq(w2),0x69)^Sq(w2)^MULx(Sq(w3),0x69)
	#print(hex(r0),hex(r1),hex(r2),hex(r3))
	return concat(concat(concat(r0,r1),r2),r3)


#print(hex(S2(0x129312A2)))



